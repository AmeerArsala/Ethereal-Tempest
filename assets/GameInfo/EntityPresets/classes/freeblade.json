{
  "name": "Freeblade",
  "desc": "A youth who is unconventionally skilled with a blade not bound by a contract.",
  "tier": 0,
  "bonusBaseStats": {
    "Level": 0,
    "MaxHP": 0,
    "MaxTP": 0,
    "Strength": 0,
    "Ether": 0,
    "Agility": 0,
    "Dexterity": 0,
    "Comprehension": 0,
    "Defense": 0,
    "Resilience": 0,
    "Mobility": 0,
    "Physique": 0,
    "BaseAdrenaline": 0
  },
  "bonusBattleStats": {
    "Accuracy": 0,
    "AttackPower": 0,
    "AttackSpeed": 0,
    "Crit": 0,
    "CritEvasion": 0,
    "Evasion": 0
  },
  "bonusGrowthRates": {
    "MaxHP": 0,
    "MaxTP": 0,
    "Strength": 0,
    "Ether": 0,
    "Agility": 0,
    "Dexterity": 0,
    "Comprehension": 0,
    "Defense": 0,
    "Resilience": 0,
    "Mobility": 0,
    "Physique": 0,
    "BaseAdrenaline": 0
  },
  "maxStats": {
    "Level": 50,
    "MaxHP": 31,
    "MaxTP": 50,
    "Strength": 20,
    "Ether": 17,
    "Agility": 17,
    "Dexterity": 17,
    "Comprehension": 19,
    "Defense": 17,
    "Resilience": 15,
    "Mobility": 10,
    "Physique": 15,
    "BaseAdrenaline": 40
  },
  "wieldableWeaponTypes": [ "Sword", "Delta Ether" ],
  "mobilityTypes": [ "Infantry" ],
  "battleSpritesheetPaths": ["Sprites/Battle/Freeblade/offense/sword/spritesheet.png", "Sprites/Battle/Freeblade/offense/delta ether/spritesheet.png"],
  "battleAnimationConfigurations": [
    {
      "weaponType": "Sword",
      "animationConfigurations": {
        "folderRoot": "Battle\\Freeblade\\offense\\sword\\",
        "onIdleCalled": {
          "actions": [
            {
              "action": { //idle
                "animationJsonPath": "phase_animations\\idle.json",
                "type": "Spritesheet"
              },
              "mirror": false,
              "concurrent": false,
              "isAttack": false
            }
          ]
        },
        "onDashCalled": {
          "actions": [
            {
              "action": { //dash
                "animationJsonPath": "phase_animations\\dash.json",
                "type": "Spritesheet"
              },
              "mirror": false,
              "concurrent": false,
              "isAttack": false
            }
          ]
        },
        "onAttackCalled": {
          /*
            if (strikeIsCrit) {
              critical();
            } else {
              if (strikeIsFollowup) {
                followup();
              } else {
                attack();
              }
            }

            if (!nextStrikeExists || !nextStrikeIsUser) {
              retreat();
            }
          */
          "IF": {
            "conditions": [ "Strike is Crit" ],
            "is": true
          },
          "THEN": {
            "actions": [
              {
                "action": {
                  "animationJsonPath": "phase_animations\\critical.json",
                  "type": "Spritesheet"
                },
                "mirror": false,
                "concurrent": false,
                "isAttack": true
              }
            ]
          },
          "ELSE": {
            "IF": {
              "conditions": [ "Strike is Followup" ],
              "is": true
            },
            "THEN": {
              "actions": [
                {
                  "action": {
                    "animationJsonPath": "phase_animations\\followup.json",
                    "type": "Spritesheet"
                  },
                  "mirror": false,
                  "concurrent": false,
                  "isAttack": true
                }
              ]
            },
            "ELSE": {
              "actions": [
                {
                  "action": {
                    "animationJsonPath": "phase_animations\\attack.json",
                    "type": "Spritesheet"
                  },
                  "mirror": false,
                  "concurrent": false,
                  "isAttack": true
                }
              ]
            }
          },
          "ALSO": {
            "IF": {
              "conditions": [ "Next Strike is User" ],
              "is": false
            },
            "THEN": {
              "actions": [
                {
                  "action": {
                    "animationJsonPath": "phase_animations\\retreat.json",
                    "type": "Spritesheet"
                  },
                  "mirror": false,
                  "concurrent": false,
                  "isAttack": false
                }
              ]
            }
          }
        },
        "onDodgeCalled": {
          "IF": { // if (nextStrikeIsUser && !nextStrikeWillCrit) { dodgeBehindEnemyIntoFinisher(); } else { regularDodge(); }
            "conditions": [ "Next Strike is User" ],
            "is": true,
            "AND": {
              "conditions": [ "Next Strike Will Crit" ],
              "is": false
            }
          },
          "THEN": { //next strike won't crit; use dodge into finisher
            "actions": [
              {
                "action": {
                  "animationJsonPath": "phase_animations\\dodge.json",
                  "type": "Spritesheet"
                },
                "mirror": false, //used to be true
                "concurrent": false,
                "isAttack": false
              }/*,
              {
                "action": {
                  "animationJsonPath": "phase_animations\\finisher.json",
                  "type": "Spritesheet"
                },
                "mirror": false,
                "concurrent": false,
                "isAttack": true
              }*/
            ]
          },
          "ELSE": { //then use normal dodge
            "actions": [
              {
                "action": {
                  "animationJsonPath": "phase_animations\\dodge.json",
                  "type": "Spritesheet"
                },
                "mirror": false,
                "concurrent": false,
                "isAttack": false
              }
            ]
          }
        },
        "skillAnimations": {
          "mappings": [
            {
              "name": "Heavy Swing",
              "onCall": {
                "actions": [
                  {
                    "action": { //heavy swing animation
                      "animationJsonPath": "skill_animations\\heavy_swing.json",
                      "type": "Spritesheet"
                    },
                    "mirror": false,
                    "concurrent": false,
                    "isAttack": true
                  }
                ]
              }
            }
          ],
          "defaultAnimation": { //finisher
            "actions": [
              {
                "action": { //finisher animation
                  "animationJsonPath": "phase_animations\\finisher.json",
                  "type": "Spritesheet"
                },
                "mirror": false,
                "concurrent": false,
                "isAttack": true
              }
            ]
          }
        },
        "battleTalentAnimations": {
          "mappings": [],
          "defaultAnimation": null
        }
      }
    },
    {
      "weaponType": "Delta Ether",
      "animationConfigurations": {
        //TODO: put stuff here
        "folderRoot": "Battle\\Freeblade\\offense\\delta ether\\",
        "onIdleCalled": {
          "actions": [
            {
              "action": { //idle
                "animationJsonPath": "phase_animations\\idle.json",
                "type": "Spritesheet"
              },
              "mirror": false,
              "concurrent": false,
              "isAttack": false
            }
          ]
        },
        "onAttackCalled": {
          /*
            if (strikeIsCrit) {
              critical();
            } else {
              attack();
            }
          */
          "IF": {
            "conditions": [ "Strike is Crit" ],
            "is": true
          },
          "THEN": {
            "actions": [
              {
                "action": {
                  "animationJsonPath": "phase_animations\\critical.json",
                  "type": "Spritesheet"
                },
                "mirror": false,
                "concurrent": false,
                "isAttack": true
              }
            ]
          },
          "ELSE": {
            "actions": [
              {
                "action": {
                  "animationJsonPath": "phase_animations\\attack.json",
                  "type": "Spritesheet"
                },
                "mirror": false,
                "concurrent": false,
                "isAttack": true
              }
            ]
          }
        },
        "onDodgeCalled": {
          "IF": {
            /*
              if (nextStrikeIsUser) {
                if (nextStrikeWillCrit) {
                  dodgeBehindEnemy();
                  crit();
                } else {
                  dodgeBehindEnemy();
                  attack();
                }    
              } else {
                regularDodge();
              }
            */
            "conditions": [ "Next Strike is User" ],
            "is": true
          },
          "THEN": { //next strike won't crit; use dodge into finisher
            "IF": {
              "conditions": [ "Next Strike Will Crit" ],
              "is": true
            },
            "THEN": {
              "actions": [
                {
                  "action": {
                    "animationJsonPath": "phase_animations\\dodge.json",
                    "type": "Spritesheet"
                  },
                  "mirror": true,
                  "concurrent": false,
                  "isAttack": false
                },
                {
                  "action": {
                    "animationJsonPath": "phase_animations\\critical.json",
                    "type": "Spritesheet"
                  },
                  "mirror": false,
                  "concurrent": false,
                  "isAttack": true
                }
              ]
            },
            "ELSE": {
              "actions": [
                {
                  "action": {
                    "animationJsonPath": "phase_animations\\dodge.json",
                    "type": "Spritesheet"
                  },
                  "mirror": true,
                  "concurrent": false,
                  "isAttack": false
                },
                {
                  "action": {
                    "animationJsonPath": "phase_animations\\attack.json",
                    "type": "Spritesheet"
                  },
                  "mirror": false,
                  "concurrent": false,
                  "isAttack": true
                }
              ]
            }
          },
          "ELSE": { //then use normal dodge
            "actions": [
              {
                "action": {
                  "animationJsonPath": "phase_animations\\dodge.json",
                  "type": "Spritesheet"
                },
                "mirror": false,
                "concurrent": false,
                "isAttack": false
              }
            ]
          }
        },
        "skillAnimations": {
          "mappings": [],
          "defaultAnimation": null
        },
        "battleTalentAnimations": {
          "mappings": [],
          "defaultAnimation": null
        }
      }
    }
  ]
}
